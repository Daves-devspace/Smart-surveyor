# Generated by Django 5.2.4 on 2025-07-22 14:32

import django.contrib.gis.db.models.fields
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SubdivisionProject',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the project', primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Descriptive name of the subdivision project', max_length=255)),
                ('boundary', django.contrib.gis.db.models.fields.PolygonField(blank=True, help_text='Geo-polygon of the main parcel boundary', null=True, srid=4326)),
                ('total_area_sqft', models.FloatField(blank=True, help_text='AI-computed total area of the parcel in square feet', null=True)),
                ('default_plot_size', models.FloatField(help_text='System-calculated default sub-plot size in square feet')),
                ('plot_size_sqft', models.FloatField(help_text='User-adjustable desired sub-plot size in square feet')),
                ('shape_preference', models.CharField(choices=[('rectangular', 'Rectangular'), ('irregular', 'Irregular'), ('circular', 'Circular')], help_text='Preferred geometric shape for sub-plots', max_length=50)),
                ('number_of_plots', models.PositiveIntegerField(help_text='Desired number of sub-plots to generate')),
                ('road_width_ft', models.FloatField(blank=True, help_text='Width of new internal roads in feet', null=True)),
                ('setback_percentage', models.FloatField(help_text='Percentage buffer from boundary reserved as setback')),
                ('zoning', models.CharField(choices=[('residential', 'Residential'), ('commercial', 'Commercial'), ('public', 'Public/Institutional')], help_text='Zoning category for the subdivision', max_length=20)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('in_progress', 'In Progress'), ('ai_generated', 'AI Generated'), ('road_defined', 'Road Defined'), ('submitted', 'Submitted')], default='draft', help_text='Current lifecycle state of the project', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the project was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the project was last modified')),
                ('user', models.ForeignKey(help_text='Owner of this project', on_delete=django.db.models.deletion.CASCADE, related_name='subdivision_projects', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RoadSegment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('centerline', django.contrib.gis.db.models.fields.LineStringField(help_text='Polyline of the road centerline', srid=4326)),
                ('width_ft', models.FloatField(help_text='Full width of the road in feet')),
                ('buffer_polygon', django.contrib.gis.db.models.fields.PolygonField(help_text='Buffered polygon representing road reserve', srid=4326)),
                ('dimension_label', models.CharField(help_text="Dimension annotation text, e.g., 'R-W = 20 ft'", max_length=50)),
                ('bearing_distance', models.TextField(help_text='Callouts for bearings & distances along centerline')),
                ('is_suggested', models.BooleanField(default=False, help_text='True if this road was AI-suggested')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('project', models.ForeignKey(help_text='Project associated with this road segment', on_delete=django.db.models.deletion.CASCADE, related_name='road_segments', to='survey.subdivisionproject')),
            ],
        ),
        migrations.CreateModel(
            name='MutationOutput',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('preview_image', models.ImageField(help_text='PNG/SVG preview of AI-generated layout', upload_to='mutations/previews/')),
                ('geojson_layout', models.JSONField(blank=True, help_text='GeoJSON representation of suggested parcels', null=True)),
                ('suggested_roads', models.JSONField(blank=True, help_text='AI-suggested road centerlines and widths', null=True)),
                ('layout_score', models.FloatField(blank=True, help_text='AI feasibility score (0.0â€“1.0) for the layout', null=True)),
                ('approved', models.BooleanField(default=False, help_text='Set true when surveyor approves the AI layout')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the layout was generated')),
                ('project', models.ForeignKey(help_text='Project associated with this AI output', on_delete=django.db.models.deletion.CASCADE, related_name='mutations', to='survey.subdivisionproject')),
            ],
        ),
        migrations.CreateModel(
            name='ManualCoordinate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('latitude', models.DecimalField(decimal_places=6, help_text='Latitude in decimal degrees', max_digits=9)),
                ('longitude', models.DecimalField(decimal_places=6, help_text='Longitude in decimal degrees', max_digits=9)),
                ('sequence', models.PositiveIntegerField(help_text='Order index to reconstruct boundary polygon')),
                ('project', models.ForeignKey(help_text='Project associated with these coordinates', on_delete=django.db.models.deletion.CASCADE, related_name='manual_coords', to='survey.subdivisionproject')),
            ],
        ),
        migrations.CreateModel(
            name='BoundaryFile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the boundary file', primary_key=True, serialize=False)),
                ('file_type', models.CharField(choices=[('kml', 'KML'), ('geojson', 'GeoJSON'), ('shp', 'Shapefile')], help_text='Format of the uploaded boundary file', max_length=20)),
                ('file', models.FileField(help_text='The uploaded boundary file', upload_to='boundaries/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the file was uploaded')),
                ('project', models.ForeignKey(help_text='Project associated with this boundary file', on_delete=django.db.models.deletion.CASCADE, related_name='boundary_files', to='survey.subdivisionproject')),
            ],
        ),
        migrations.CreateModel(
            name='TemplatePlacement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('template_pdf', models.FileField(help_text='Static mutation application PDF (A3/A4)', upload_to='templates/')),
                ('offset_x', models.FloatField(default=0.0, help_text='X-offset in PDF units for drawing placement')),
                ('offset_y', models.FloatField(default=0.0, help_text='Y-offset in PDF units for drawing placement')),
                ('scale_pct', models.FloatField(default=100.0, help_text='Scale percentage of the drawing relative to template')),
                ('snapped', models.BooleanField(default=False, help_text='Whether snapping guides were used for placement')),
                ('final_pdf', models.FileField(blank=True, help_text='Merged print-ready PDF for stamping', null=True, upload_to='templates/final/')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when template was merged')),
                ('project', models.OneToOneField(help_text='Project for which this template placement applies', on_delete=django.db.models.deletion.CASCADE, related_name='template_placement', to='survey.subdivisionproject')),
            ],
        ),
    ]
